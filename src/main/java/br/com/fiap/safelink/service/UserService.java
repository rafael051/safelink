package br.com.fiap.safelink.service;

import br.com.fiap.safelink.dto.request.UserRequestDTO;
import br.com.fiap.safelink.dto.response.UserResponseDTO;
import br.com.fiap.safelink.exception.UsuarioNotFoundException;
import br.com.fiap.safelink.model.User;
import br.com.fiap.safelink.repository.UserRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.Optional;

/**
 * # üë§ Service: UserService
 *
 * Camada de regras de neg√≥cio para a entidade `User`.
 * Fornece opera√ß√µes de CRUD, filtros paginados, convers√£o DTO/entidade e criptografia de senha.
 *
 * ---
 * üîê Garante unicidade de e-mail e valida√ß√µes de neg√≥cio
 * üîÑ Utiliza ModelMapper para convers√£o autom√°tica
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository repository;
    private final ModelMapper modelMapper;
    private final PasswordEncoder passwordEncoder;

    // ============================================
    // ‚ûï Cria√ß√£o
    // ============================================

    /**
     * Registra um novo usu√°rio no sistema.
     *
     * - Verifica unicidade de e-mail
     * - Criptografa a senha
     *
     * @param dto dados do usu√°rio
     * @return DTO do usu√°rio criado
     */
    @Transactional
    public UserResponseDTO gravar(UserRequestDTO dto) {
        if (repository.existsByEmail(dto.getEmail())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "E-mail j√° cadastrado.");
        }

        User user = modelMapper.map(dto, User.class);
        user.setPassword(passwordEncoder.encode(dto.getPassword()));
        user = repository.save(user);

        log.info("‚úÖ Usu√°rio criado com sucesso: ID {}", user.getId());
        return toDTO(user);
    }

    // ============================================
    // ‚úèÔ∏è Atualiza√ß√£o
    // ============================================

    /**
     * Atualiza os dados de um usu√°rio.
     *
     * - Valida duplicidade de e-mail
     * - Recriptografa a senha
     *
     * @param id  identificador do usu√°rio
     * @param dto novos dados
     * @return DTO atualizado
     */
    @Transactional
    public UserResponseDTO atualizar(Long id, UserRequestDTO dto) {
        User user = repository.findById(id)
                .orElseThrow(() -> new UsuarioNotFoundException(id));

        if (!user.getEmail().equals(dto.getEmail()) && repository.existsByEmail(dto.getEmail())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "E-mail j√° est√° em uso por outro usu√°rio.");
        }

        modelMapper.map(dto, user);
        user.setPassword(passwordEncoder.encode(dto.getPassword()));
        user = repository.save(user);

        log.info("‚úèÔ∏è Usu√°rio atualizado com sucesso: ID {}", user.getId());
        return toDTO(user);
    }

    // ============================================
    // üîç Consultas
    // ============================================

    /**
     * Lista todos os usu√°rios sem pagina√ß√£o.
     */
    public List<UserResponseDTO> consultarTodos() {
        log.info("üìã Listando todos os usu√°rios");
        return repository.findAll().stream().map(this::toDTO).toList();
    }

    /**
     * Lista usu√°rios com pagina√ß√£o.
     */
    public Page<UserResponseDTO> consultarPaginado(Pageable pageable) {
        log.info("üìÑ Listando usu√°rios paginados");
        return repository.findAll(pageable).map(this::toDTO);
    }

    /**
     * Consulta usu√°rio por ID.
     */
    public UserResponseDTO consultarPorId(Long id) {
        User user = repository.findById(id)
                .orElseThrow(() -> new UsuarioNotFoundException(id));
        log.info("üîç Usu√°rio encontrado: ID {}", id);
        return toDTO(user);
    }

    /**
     * Retorna a entidade `User` pura (uso interno).
     */
    public User buscarEntidadePorId(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new UsuarioNotFoundException(id));
    }

    // ============================================
    // üóëÔ∏è Exclus√£o
    // ============================================

    /**
     * Exclui um usu√°rio do sistema.
     *
     * @param id identificador do usu√°rio
     */
    @Transactional
    public void excluir(Long id) {
        if (!repository.existsById(id)) {
            throw new UsuarioNotFoundException("Usu√°rio n√£o encontrado para exclus√£o: " + id);
        }
        repository.deleteById(id);
        log.info("üóëÔ∏è Usu√°rio exclu√≠do com sucesso: ID {}", id);
    }

    // ============================================
    // üîÑ Convers√£o
    // ============================================

    /**
     * Converte a entidade `User` em `UserResponseDTO`.
     */
    private UserResponseDTO toDTO(User user) {
        return modelMapper.map(user, UserResponseDTO.class);
    }
}
