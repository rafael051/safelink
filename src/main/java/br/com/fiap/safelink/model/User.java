package br.com.fiap.safelink.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

/**
 * # üìÑ Entidade: User
 *
 * Representa um usu√°rio autenticado no sistema SafeLink. Cada usu√°rio possui um e-mail √∫nico,
 * senha criptografada e uma role (papel) que define seus n√≠veis de acesso na aplica√ß√£o.
 * Implementa a interface `UserDetails` do Spring Security para controle de autentica√ß√£o.
 *
 * ---
 * ## üîê Seguran√ßa e Acesso
 * - Usu√°rios s√£o autenticados por `email` e `password`
 * - As permiss√µes s√£o derivadas do atributo `role`
 * - Compat√≠vel com Spring Security e JWT
 *
 * ---
 * @author Rafael
 * @version 1.0
 */
@Entity
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "tb_user")
public class User implements UserDetails {

    // ===========================
    // üîë Identifica√ß√£o
    // ===========================

    /**
     * Identificador √∫nico do usu√°rio (chave prim√°ria).
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // ===========================
    // üìß Credenciais de Acesso
    // ===========================

    /**
     * E-mail do usu√°rio. Usado como login.
     * Deve ser √∫nico e seguir o padr√£o de endere√ßo de e-mail v√°lido.
     */
    @Email(message = "E-mail inv√°lido")
    @NotBlank(message = "O e-mail √© obrigat√≥rio.")
    @Column(unique = true, nullable = false)
    private String email;

    /**
     * Senha do usu√°rio, que ser√° armazenada j√° criptografada.
     * Deve ter pelo menos 8 caracteres.
     */
    @NotBlank(message = "A senha √© obrigat√≥ria.")
    @Size(min = 8, message = "A senha deve ter no m√≠nimo 8 caracteres.")
    private String password;

    // ===========================
    // üé≠ Papel do Usu√°rio
    // ===========================

    /**
     * Papel do usu√°rio na aplica√ß√£o.
     * Pode ser `ADMIN` ou `USER`.
     * Define os privil√©gios de acesso aos recursos protegidos.
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private UserRole role;

    // ===========================
    // üõ°Ô∏è M√©todos da interface UserDetails
    // ===========================

    /**
     * Retorna a lista de autoridades (permiss√µes) do usu√°rio.
     * Cada `UserRole` √© convertido para `GrantedAuthority`.
     *
     * @return Lista com a autoridade baseada na role.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.name()));
    }

    /**
     * Retorna o identificador principal do usu√°rio usado para login.
     * No nosso caso, √© o `email`.
     *
     * @return e-mail do usu√°rio
     */
    @Override
    public String getUsername() {
        return email;
    }

    /**
     * Define se a conta do usu√°rio est√° expirada.
     * Aqui, sempre retorna `true` (conta nunca expira).
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    /**
     * Define se a conta est√° bloqueada.
     * Aqui, sempre retorna `true` (conta nunca bloqueia).
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    /**
     * Define se as credenciais est√£o expiradas.
     * Aqui, sempre retorna `true` (credencial sempre v√°lida).
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    /**
     * Define se o usu√°rio est√° habilitado no sistema.
     * Aqui, sempre `true`. Pode ser ajustado futuramente.
     */
    @Override
    public boolean isEnabled() {
        return true;
    }
}
