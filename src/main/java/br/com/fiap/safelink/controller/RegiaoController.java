package br.com.fiap.safelink.controller;

import br.com.fiap.safelink.dto.request.RegiaoRequestDTO;
import br.com.fiap.safelink.dto.response.RegiaoResponseDTO;
import br.com.fiap.safelink.filter.RegiaoFilter;
import br.com.fiap.safelink.service.RegiaoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springdoc.core.annotations.ParameterObject;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * # üó∫Ô∏è Controller: RegiaoController
 *
 * Camada REST respons√°vel pelo gerenciamento da entidade `Regiao`.
 *
 * ---
 * ## üîê Seguran√ßa
 * - Todos os endpoints exigem autentica√ß√£o JWT
 *
 * ## üåê CORS
 * - Permite acesso de frontend local em `http://localhost:3000`
 *
 * ## üìö Funcionalidades
 * - Criar, consultar, listar (com ou sem filtro), atualizar e excluir regi√µes geogr√°ficas
 */
@SecurityRequirement(name = "bearerAuth")
@Tag(name = "3 - Regi√µes", description = "Endpoints relacionados ao cadastro e gerenciamento de regi√µes geogr√°ficas")
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/regioes")
@RequiredArgsConstructor
public class RegiaoController {

    private final RegiaoService service;

    // ============================================
    // üìå POST /regioes
    // ============================================

    /**
     * ## üìå Cadastrar nova regi√£o
     *
     * Cria um novo registro de regi√£o geogr√°fica.
     *
     * - Requisi√ß√£o: JSON contendo cidade, estado e coordenadas
     * - Resposta: DTO com ID e dados da regi√£o criada
     * - HTTP: 201 Created
     */
    @PostMapping
    @CacheEvict(value = "regioes", allEntries = true)
    @Operation(
            summary = "Cadastrar regi√£o",
            description = "Registra uma nova regi√£o no sistema.",
            responses = {
                    @ApiResponse(responseCode = "201", description = "Regi√£o criada com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados")
            }
    )
    public ResponseEntity<RegiaoResponseDTO> gravar(@RequestBody @Valid RegiaoRequestDTO dto) {
        return ResponseEntity.status(HttpStatus.CREATED).body(service.gravar(dto));
    }

    // ============================================
    // üìã GET /regioes
    // ============================================

    /**
     * ## üìã Listar todas as regi√µes (sem filtros)
     *
     * Retorna todas as regi√µes cadastradas com suporte √† pagina√ß√£o e ordena√ß√£o.
     */
    @GetMapping
    @Operation(
            summary = "Listar regi√µes (paginado)",
            description = "Retorna todas as regi√µes cadastradas, com suporte √† pagina√ß√£o.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista paginada de regi√µes retornada com sucesso")
            }
    )
    public ResponseEntity<Page<RegiaoResponseDTO>> listarTodosPaginado(@ParameterObject Pageable pageable) {
        return ResponseEntity.ok(service.consultarPaginado(pageable));
    }

    // ============================================
    // üîç GET /regioes/filtro
    // ============================================

    /**
     * ## üîç Consultar regi√µes com filtros din√¢micos
     *
     * Permite buscar regi√µes com base em crit√©rios como:
     * - Nome da cidade
     * - Estado (sigla)
     *
     * Utiliza Specification + Pageable com cache.
     */
    @GetMapping("/filtro")
    @Cacheable(
            value = "regioes",
            key = "'spec_'+#filter.toString()+'_pagina_'+#pageable.pageNumber+'_tamanho_'+#pageable.pageSize+'_ordenacao_'+#pageable.sort.toString()"
    )
    @Operation(
            summary = "Listar regi√µes com filtros din√¢micos",
            description = "Permite consultar regi√µes por m√∫ltiplos crit√©rios, com suporte √† pagina√ß√£o e ordena√ß√£o.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista filtrada de regi√µes retornada com sucesso")
            }
    )
    public ResponseEntity<Page<RegiaoResponseDTO>> listarComFiltro(
            @ParameterObject RegiaoFilter filter,
            @ParameterObject Pageable pageable
    ) {
        return ResponseEntity.ok(service.consultarComFiltro(filter, pageable));
    }

    // ============================================
    // üîé GET /regioes/{id}
    // ============================================

    /**
     * ## üîé Buscar regi√£o por ID
     *
     * Retorna os dados de uma regi√£o espec√≠fica com base no identificador √∫nico.
     */
    @GetMapping("/{id}")
    @Operation(
            summary = "Buscar regi√£o por ID",
            description = "Retorna os dados da regi√£o correspondente ao ID informado.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Regi√£o encontrada"),
                    @ApiResponse(responseCode = "404", description = "Regi√£o n√£o encontrada")
            }
    )
    public ResponseEntity<RegiaoResponseDTO> buscarPorId(@PathVariable Long id) {
        return ResponseEntity.ok(service.consultarPorId(id));
    }

    // ============================================
    // ‚úèÔ∏è PUT /regioes/{id}
    // ============================================

    /**
     * ## ‚úèÔ∏è Atualizar regi√£o
     *
     * Atualiza os dados de uma regi√£o existente.
     *
     * - Requisi√ß√£o: JSON com novos dados da regi√£o
     * - Resposta: DTO atualizado
     */
    @PutMapping("/{id}")
    @CacheEvict(value = "regioes", allEntries = true)
    @Operation(
            summary = "Atualizar regi√£o",
            description = "Atualiza os dados de uma regi√£o existente.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Regi√£o atualizada com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados"),
                    @ApiResponse(responseCode = "404", description = "Regi√£o n√£o encontrada")
            }
    )
    public ResponseEntity<RegiaoResponseDTO> atualizar(
            @PathVariable Long id,
            @RequestBody @Valid RegiaoRequestDTO dto
    ) {
        return ResponseEntity.ok(service.atualizar(id, dto));
    }

    // ============================================
    // üóëÔ∏è DELETE /regioes/{id}
    // ============================================

    /**
     * ## üóëÔ∏è Excluir regi√£o
     *
     * Remove a regi√£o geogr√°fica do sistema com base no ID informado.
     *
     * - HTTP: 204 No Content
     */
    @DeleteMapping("/{id}")
    @CacheEvict(value = "regioes", allEntries = true)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @Operation(
            summary = "Excluir regi√£o",
            description = "Remove uma regi√£o do sistema.",
            responses = {
                    @ApiResponse(responseCode = "204", description = "Regi√£o removida com sucesso"),
                    @ApiResponse(responseCode = "404", description = "Regi√£o n√£o encontrada")
            }
    )
    public void excluir(@PathVariable Long id) {
        service.excluir(id);
    }
}
