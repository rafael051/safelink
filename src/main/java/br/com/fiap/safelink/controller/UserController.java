package br.com.fiap.safelink.controller;

import br.com.fiap.safelink.dto.request.UserRequestDTO;
import br.com.fiap.safelink.dto.response.UserResponseDTO;
import br.com.fiap.safelink.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * # üë§ Controller: UserController
 *
 * Respons√°vel por expor os endpoints REST para gerenciamento da entidade `User`.
 * Suporta opera√ß√µes de cria√ß√£o, leitura, atualiza√ß√£o e exclus√£o de usu√°rios autentic√°veis.
 *
 * ---
 * üîê Todos os endpoints exigem autentica√ß√£o via JWT
 * üåê CORS liberado para http://localhost:3000
 */
@SecurityRequirement(name = "bearerAuth")
@Tag(name = "2 - Usu√°rios", description = "Endpoints para gerenciamento de usu√°rios autentic√°veis")
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/users")
@RequiredArgsConstructor
public class UserController {

    private static final Logger log = LoggerFactory.getLogger(UserController.class);
    private final UserService service;

    // ============================================
    // üìå POST /users
    // ============================================

    /**
     * ### üìå Criar novo usu√°rio
     */
    @PostMapping
    @Operation(
            summary = "Criar novo usu√°rio",
            description = "Registra um novo usu√°rio com e-mail, senha e papel.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Usu√°rio criado com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados")
            }
    )
    public ResponseEntity<UserResponseDTO> criar(@RequestBody @Valid UserRequestDTO dto) {
        log.info("üë§ Criando novo usu√°rio: {}", dto.getEmail());
        return ResponseEntity.ok(service.criarUsuario(dto));
    }

    // ============================================
    // üìã GET /users
    // ============================================

    /**
     * ### üìã Listar todos os usu√°rios
     */
    @GetMapping
    @Operation(
            summary = "Listar usu√°rios",
            description = "Retorna todos os usu√°rios cadastrados.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista de usu√°rios retornada com sucesso")
            }
    )
    public ResponseEntity<List<UserResponseDTO>> listarTodos() {
        log.info("üìã Listando todos os usu√°rios.");
        return ResponseEntity.ok(service.listarTodos());
    }

    // ============================================
    // üîç GET /users/{id}
    // ============================================

    /**
     * ### üîç Buscar usu√°rio por ID
     */
    @GetMapping("/{id}")
    @Operation(
            summary = "Buscar usu√°rio por ID",
            description = "Retorna os dados do usu√°rio correspondente ao ID informado.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Usu√°rio encontrado"),
                    @ApiResponse(responseCode = "404", description = "Usu√°rio n√£o encontrado")
            }
    )
    public ResponseEntity<UserResponseDTO> buscarPorId(@PathVariable Long id) {
        log.info("üîç Buscando usu√°rio com ID: {}", id);
        return service.buscarPorId(id)
                .map(ResponseEntity::ok)
                .orElseGet(() -> {
                    log.warn("‚ö†Ô∏è Usu√°rio n√£o encontrado para ID: {}", id);
                    return ResponseEntity.notFound().build();
                });
    }

    // ============================================
    // ‚úèÔ∏è PUT /users/{id}
    // ============================================

    /**
     * ### ‚úèÔ∏è Atualizar usu√°rio existente
     */
    @PutMapping("/{id}")
    @Operation(
            summary = "Atualizar usu√°rio",
            description = "Atualiza os dados de um usu√°rio existente.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Usu√°rio atualizado com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados"),
                    @ApiResponse(responseCode = "404", description = "Usu√°rio n√£o encontrado")
            }
    )
    public ResponseEntity<UserResponseDTO> atualizar(@PathVariable Long id, @RequestBody @Valid UserRequestDTO dto) {
        log.info("üîÑ Atualizando usu√°rio ID: {}", id);
        return service.atualizarUsuario(id, dto)
                .map(ResponseEntity::ok)
                .orElseGet(() -> {
                    log.warn("‚ö†Ô∏è Usu√°rio n√£o encontrado para atualiza√ß√£o: {}", id);
                    return ResponseEntity.notFound().build();
                });
    }

    // ============================================
    // üóëÔ∏è DELETE /users/{id}
    // ============================================

    /**
     * ### üóëÔ∏è Excluir usu√°rio
     */
    @DeleteMapping("/{id}")
    @Operation(
            summary = "Excluir usu√°rio",
            description = "Remove um usu√°rio do sistema.",
            responses = {
                    @ApiResponse(responseCode = "204", description = "Usu√°rio exclu√≠do com sucesso"),
                    @ApiResponse(responseCode = "404", description = "Usu√°rio n√£o encontrado")
            }
    )
    public ResponseEntity<Void> excluir(@PathVariable Long id) {
        log.info("‚ùå Excluindo usu√°rio ID: {}", id);
        boolean excluido = service.excluirUsuario(id);
        return excluido ? ResponseEntity.noContent().build() : ResponseEntity.notFound().build();
    }
}
