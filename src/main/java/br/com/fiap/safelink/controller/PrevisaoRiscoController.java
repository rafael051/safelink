package br.com.fiap.safelink.controller;

import br.com.fiap.safelink.dto.request.PrevisaoRiscoRequestDTO;
import br.com.fiap.safelink.dto.response.PrevisaoRiscoResponseDTO;
import br.com.fiap.safelink.filter.PrevisaoRiscoFilter;
import br.com.fiap.safelink.service.PrevisaoRiscoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springdoc.core.annotations.ParameterObject;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * # üîÆ Controller: PrevisaoRiscoController
 *
 * Camada REST para gerenciamento da entidade `PrevisaoRisco`.
 *
 * ---
 * ## üîê Seguran√ßa
 * - Requer autentica√ß√£o JWT para todos os endpoints
 *
 * ---
 * ## üåê CORS
 * - Permite requisi√ß√µes vindas de `http://localhost:3000`
 *
 * ---
 * ## Funcionalidades
 * - Criar, buscar, listar com/sem filtro, atualizar e excluir previs√µes de risco
 * - Cache para otimiza√ß√£o de consultas
 */
@SecurityRequirement(name = "bearerAuth")
@Tag(name = "7 - Previs√µes de Risco", description = "Endpoints relacionados √† gera√ß√£o e gerenciamento de previs√µes de risco")

@RestController
@RequestMapping("/previsoes-risco")
@RequiredArgsConstructor
public class PrevisaoRiscoController {

    private final PrevisaoRiscoService service;

    // ============================================
    // üìå POST /previsoes-risco
    // ============================================

    /**
     * ## üìå Criar nova previs√£o de risco
     *
     * Cadastra uma nova previs√£o de risco baseada em dados ambientais e regionais.
     *
     * - Requisi√ß√£o: JSON com dados v√°lidos
     * - Resposta: DTO da previs√£o persistida
     * - HTTP: 201 Created
     */
    @PostMapping
    @CacheEvict(value = "previsoesRisco", allEntries = true)
    @Operation(
            summary = "Cadastrar previs√£o de risco",
            description = "Registra uma nova previs√£o de risco no sistema.",
            responses = {
                    @ApiResponse(responseCode = "201", description = "Previs√£o criada com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados")
            }
    )
    public ResponseEntity<PrevisaoRiscoResponseDTO> gravar(@RequestBody @Valid PrevisaoRiscoRequestDTO dto) {
        return ResponseEntity.status(HttpStatus.CREATED).body(service.gravar(dto));
    }

    // ============================================
    // üìã GET /previsoes-risco
    // ============================================

    /**
     * ## üìã Listar previs√µes (sem filtros)
     *
     * Retorna todas as previs√µes cadastradas, com pagina√ß√£o e ordena√ß√£o.
     */
    @GetMapping
    @Operation(
            summary = "Listar previs√µes de risco (paginado)",
            description = "Retorna todas as previs√µes de risco do sistema, com suporte √† pagina√ß√£o e ordena√ß√£o.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista paginada de previs√µes retornada com sucesso")
            }
    )
    public ResponseEntity<Page<PrevisaoRiscoResponseDTO>> listarTodosPaginado(@ParameterObject Pageable pageable) {
        return ResponseEntity.ok(service.consultarPaginado(pageable));
    }

    // ============================================
    // üîç GET /previsoes-risco/filtro
    // ============================================

    /**
     * ## üîç Consultar previs√µes com filtros din√¢micos
     *
     * Realiza consultas por crit√©rios como:
     * - Data da previs√£o
     * - Regi√£o
     * - N√≠vel de risco
     *
     * - Usa Specification + Pageable
     * - Cache para evitar sobrecarga
     */
    @GetMapping("/filtro")
    @Cacheable(
            value = "previsoesRisco",
            key = "'spec_'+#filter.toString()+'_pagina_'+#pageable.pageNumber+'_tamanho_'+#pageable.pageSize+'_ordenacao_'+#pageable.sort.toString()"
    )
    @Operation(
            summary = "Listar previs√µes com filtros din√¢micos",
            description = "Permite consultar previs√µes de risco por m√∫ltiplos crit√©rios, com pagina√ß√£o e ordena√ß√£o.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista filtrada de previs√µes retornada com sucesso")
            }
    )
    public ResponseEntity<Page<PrevisaoRiscoResponseDTO>> listarComFiltro(
            @ParameterObject PrevisaoRiscoFilter filter,
            @ParameterObject Pageable pageable
    ) {
        return ResponseEntity.ok(service.consultarComFiltro(filter, pageable));
    }

    // ============================================
    // üîé GET /previsoes-risco/{id}
    // ============================================

    /**
     * ## üîé Buscar previs√£o por ID
     *
     * Retorna os dados de uma previs√£o de risco com base no identificador √∫nico.
     */
    @GetMapping("/{id}")
    @Operation(
            summary = "Buscar previs√£o por ID",
            description = "Retorna os dados da previs√£o de risco correspondente ao ID informado.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Previs√£o encontrada"),
                    @ApiResponse(responseCode = "404", description = "Previs√£o n√£o encontrada")
            }
    )
    public ResponseEntity<PrevisaoRiscoResponseDTO> buscarPorId(@PathVariable Long id) {
        return ResponseEntity.ok(service.consultarPorId(id));
    }

    // ============================================
    // ‚úèÔ∏è PUT /previsoes-risco/{id}
    // ============================================

    /**
     * ## ‚úèÔ∏è Atualizar previs√£o de risco
     *
     * Altera os dados de uma previs√£o existente.
     *
     * - Requisi√ß√£o: JSON com campos v√°lidos
     * - HTTP: 200 OK
     */
    @PutMapping("/{id}")
    @CacheEvict(value = "previsoesRisco", allEntries = true)
    @Operation(
            summary = "Atualizar previs√£o de risco",
            description = "Atualiza os dados de uma previs√£o de risco existente.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Previs√£o atualizada com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados"),
                    @ApiResponse(responseCode = "404", description = "Previs√£o n√£o encontrada")
            }
    )
    public ResponseEntity<PrevisaoRiscoResponseDTO> atualizar(
            @PathVariable Long id,
            @RequestBody @Valid PrevisaoRiscoRequestDTO dto
    ) {
        return ResponseEntity.ok(service.atualizar(id, dto));
    }

    // ============================================
    // üóëÔ∏è DELETE /previsoes-risco/{id}
    // ============================================

    /**
     * ## üóëÔ∏è Excluir previs√£o de risco
     *
     * Remove a previs√£o do banco de dados com base no ID.
     *
     * - HTTP: 204 No Content
     */
    @DeleteMapping("/{id}")
    @CacheEvict(value = "previsoesRisco", allEntries = true)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @Operation(
            summary = "Excluir previs√£o de risco",
            description = "Remove uma previs√£o de risco do sistema.",
            responses = {
                    @ApiResponse(responseCode = "204", description = "Previs√£o removida com sucesso"),
                    @ApiResponse(responseCode = "404", description = "Previs√£o n√£o encontrada")
            }
    )
    public void excluir(@PathVariable Long id) {
        service.excluir(id);
    }
}
