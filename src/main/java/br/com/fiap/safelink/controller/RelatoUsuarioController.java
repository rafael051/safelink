package br.com.fiap.safelink.controller;

import br.com.fiap.safelink.dto.request.RelatoUsuarioRequestDTO;
import br.com.fiap.safelink.dto.response.RelatoUsuarioResponseDTO;
import br.com.fiap.safelink.filter.RelatoUsuarioFilter;
import br.com.fiap.safelink.service.RelatoUsuarioService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springdoc.core.annotations.ParameterObject;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * # üó£Ô∏è Controller: RelatoUsuarioController
 *
 * Controlador REST respons√°vel pelo gerenciamento da entidade `RelatoUsuario`.
 *
 * ---
 * ## üîê Seguran√ßa
 * - Todos os endpoints requerem autentica√ß√£o via JWT
 *
 * ## üåê CORS
 * - Libera acesso do frontend local: http://localhost:3000
 *
 * ## üìö Funcionalidades
 * - Criar, consultar, listar (com e sem filtro), atualizar e excluir relatos enviados por usu√°rios
 */
@SecurityRequirement(name = "bearerAuth")
@Tag(name = "5 - Relatos de Usu√°rio", description = "Endpoints relacionados aos relatos enviados por cidad√£os e agentes de campo")


@RestController
@RequestMapping("/relatos-usuario")
@RequiredArgsConstructor
public class RelatoUsuarioController {

    private final RelatoUsuarioService service;

    // ============================================
    // üìå POST /relatos-usuario
    // ============================================

    /**
     * ## üìå Cadastrar novo relato de usu√°rio
     *
     * Registra um novo relato de condi√ß√£o de risco relatado por um cidad√£o ou agente.
     *
     * - Requisi√ß√£o: JSON contendo descri√ß√£o, localiza√ß√£o e tipo de risco
     * - Resposta: DTO com ID e dados do relato criado
     * - HTTP: 201 Created
     */
    @PostMapping
    @CacheEvict(value = "relatosUsuario", allEntries = true)
    @Operation(
            summary = "Cadastrar relato de usu√°rio",
            description = "Registra um novo relato de condi√ß√£o de risco enviado por um usu√°rio.",
            responses = {
                    @ApiResponse(responseCode = "201", description = "Relato criado com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados")
            }
    )
    public ResponseEntity<RelatoUsuarioResponseDTO> gravar(@RequestBody @Valid RelatoUsuarioRequestDTO dto) {
        return ResponseEntity.status(HttpStatus.CREATED).body(service.gravar(dto));
    }

    // ============================================
    // üìã GET /relatos-usuario
    // ============================================

    /**
     * ## üìã Listar todos os relatos (sem filtro)
     *
     * Retorna todos os relatos cadastrados, com suporte a pagina√ß√£o e ordena√ß√£o.
     */
    @GetMapping
    @Operation(
            summary = "Listar relatos (paginado)",
            description = "Retorna todos os relatos cadastrados, com suporte √† pagina√ß√£o.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista paginada de relatos retornada com sucesso")
            }
    )
    public ResponseEntity<Page<RelatoUsuarioResponseDTO>> listarTodosPaginado(@ParameterObject Pageable pageable) {
        return ResponseEntity.ok(service.consultarPaginado(pageable));
    }

    // ============================================
    // üìÑ GET /relatos-usuario/filtro
    // ============================================

    /**
     * ## üìÑ Consultar relatos com filtros din√¢micos
     *
     * Permite filtrar relatos por atributos como data, tipo, descri√ß√£o ou localiza√ß√£o.
     *
     * - Utiliza Specification + Pageable
     * - Cache ativado para performance
     */
    @GetMapping("/filtro")
    @Cacheable(
            value = "relatosUsuario",
            key = "'spec_'+#filter.toString()+'_pagina_'+#pageable.pageNumber+'_tamanho_'+#pageable.pageSize+'_ordenacao_'+#pageable.sort.toString()"
    )
    @Operation(
            summary = "Listar relatos com filtros din√¢micos",
            description = "Permite consultar relatos por m√∫ltiplos crit√©rios, com suporte √† pagina√ß√£o e ordena√ß√£o.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista filtrada de relatos retornada com sucesso")
            }
    )
    public ResponseEntity<Page<RelatoUsuarioResponseDTO>> listarComFiltro(
            @ParameterObject RelatoUsuarioFilter filter,
            @ParameterObject Pageable pageable
    ) {
        return ResponseEntity.ok(service.consultarComFiltro(filter, pageable));
    }

    // ============================================
    // üîç GET /relatos-usuario/{id}
    // ============================================

    /**
     * ## üîç Buscar relato por ID
     *
     * Retorna os dados detalhados de um relato a partir do ID informado.
     */
    @GetMapping("/{id}")
    @Operation(
            summary = "Buscar relato por ID",
            description = "Retorna os dados do relato correspondente ao ID informado.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Relato encontrado"),
                    @ApiResponse(responseCode = "404", description = "Relato n√£o encontrado")
            }
    )
    public ResponseEntity<RelatoUsuarioResponseDTO> buscarPorId(@PathVariable Long id) {
        return ResponseEntity.ok(service.consultarPorId(id));
    }

    // ============================================
    // ‚úèÔ∏è PUT /relatos-usuario/{id}
    // ============================================

    /**
     * ## ‚úèÔ∏è Atualizar relato existente
     *
     * Atualiza o conte√∫do de um relato previamente cadastrado.
     *
     * - Requisi√ß√£o: JSON com novos dados
     * - Resposta: DTO atualizado
     */
    @PutMapping("/{id}")
    @CacheEvict(value = "relatosUsuario", allEntries = true)
    @Operation(
            summary = "Atualizar relato",
            description = "Atualiza os dados de um relato de usu√°rio existente.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Relato atualizado com sucesso"),
                    @ApiResponse(responseCode = "400", description = "Erro de valida√ß√£o nos dados enviados"),
                    @ApiResponse(responseCode = "404", description = "Relato n√£o encontrado")
            }
    )
    public ResponseEntity<RelatoUsuarioResponseDTO> atualizar(
            @PathVariable Long id,
            @RequestBody @Valid RelatoUsuarioRequestDTO dto
    ) {
        return ResponseEntity.ok(service.atualizar(id, dto));
    }

    // ============================================
    // üóëÔ∏è DELETE /relatos-usuario/{id}
    // ============================================

    /**
     * ## üóëÔ∏è Excluir relato
     *
     * Remove um relato do sistema com base no ID.
     *
     * - HTTP: 204 No Content
     */
    @DeleteMapping("/{id}")
    @CacheEvict(value = "relatosUsuario", allEntries = true)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @Operation(
            summary = "Excluir relato",
            description = "Remove um relato do sistema.",
            responses = {
                    @ApiResponse(responseCode = "204", description = "Relato removido com sucesso"),
                    @ApiResponse(responseCode = "404", description = "Relato n√£o encontrado")
            }
    )
    public void excluir(@PathVariable Long id) {
        service.excluir(id);
    }
}
